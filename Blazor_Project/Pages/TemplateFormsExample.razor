@page "/template-forms"
@using System.Text.Json
@using Microsoft.JSInterop
@using System.Diagnostics
@using Microsoft.Extensions.Logging
@using Blazor_Project.Classes
@using System;
@using System.Net.Http;
@using Blazor_Project.Services
@inject ILogger<TemplateFormsExample> Logger;
<link rel="stylesheet" href="css/FormExample.css">
<h1>Template-driven Form Example:</h1>
<h2>Hello, @FormData.FirstName, your gender is @SelectedGender?.Label</h2>

<form @onsubmit="OnFormSubmit">
    <p class="@((!string.IsNullOrWhiteSpace(FormData.FirstName) && (UserNameDirty || UserNameTouched)) ? "has-error" : "")">
        <label id="firstName" style="color: @(string.IsNullOrWhiteSpace(FormData.FirstName) ? "red" : "inherit");">First Name:</label>
        <input type="text" @bind="FormData.FirstName" required style="color: @(string.IsNullOrWhiteSpace(FormData.FirstName) ? "red" : "inherit");">
        <span style="color: @(string.IsNullOrWhiteSpace(FormData.FirstName) ? "red" : "inherit");">@((string.IsNullOrWhiteSpace(FormData.FirstName)) ? "This field is required" : "")</span>
    </p>
    <p>
        <label>Password:</label>
        <input type="password" @bind="FormData.Password" required>
    </p>
    <p>
        Choose gender:
        @foreach (var genderOption in GenderOptions)
        {
            <label><input type="radio" name="gender" checked="@IsGenderSelected(genderOption)" @onclick="() => SelectGender(genderOption)" />@genderOption.Label</label>
        }
    </p>
    <p><input type="checkbox" @bind="FormData.ShouldUseCity"></p>
    @if (FormData.ShouldUseCity)
    {
        <select @bind="FormData.City">
            @foreach (var city in Cities)
            {
                <option value="@city.id">@city.name</option>
            }
        </select>
    }
    <p>
        <label>Stand-alone:</label>
        <input type="text" @bind="Standalone" required>
    </p>
    <p><button type="submit" disabled="@(!IsFormValid)">Submit</button></p>
</form>

@code {
    private Stopwatch stopwatch = new Stopwatch();
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Parameter]
    public FormData FormData { get; set; } = new FormData();
    private bool UserNameDirty { get; set; }
    private bool UserNameTouched { get; set; }
    private Gender SelectedGender { get; set; }
    private string Standalone { get; set; }

    private List<Gender> GenderOptions { get; } = new List<Gender> {
        new Gender { GenderType = "m", Label = "male" },
        new Gender { GenderType = "f", Label = "female" }
    };

    private List<dynamic> Cities { get; } = new List<dynamic> {
        new { id = 1, name = "Kharkiv" },
        new { id = 2, name = "Kiev" },
        new { id = 3, name = "Lviv" }
    };

    private bool IsGenderSelected(Gender genderOption) => SelectedGender == genderOption;

    private void SelectGender(Gender genderOption) { SelectedGender = genderOption; }

    private bool IsFormValid => !string.IsNullOrWhiteSpace(FormData.FirstName) && !string.IsNullOrWhiteSpace(FormData.Password) && SelectedGender != null && (!FormData.ShouldUseCity || FormData.City != 0);

    private async Task OnFormSubmit()
    {
        try
        {

            stopwatch.Restart();
            var formDataDict = new Dictionary<string, string> {
                 { "name", FormData.FirstName },
                 { "password", FormData.Password },
                 { "shouldUseCity", FormData.ShouldUseCity.ToString() },
                 { "label", SelectedGender?.Label },
                 { "gender", SelectedGender?.GenderType },
                 { "city", FormData.ShouldUseCity ? FormData.City.ToString() : "" }
                };


            var json = JsonSerializer.Serialize(formDataDict, new JsonSerializerOptions { WriteIndented = true });
            stopwatch.Stop();
            Log($"The form is submitted - Execution Time: {stopwatch.ElapsedMilliseconds} ms");
            await JSRuntime.InvokeVoidAsync("alert", json);



        }
        catch (Exception ex)
        {
            Log(ex.Message);
        }

    }



    private void Log(string message)
    {
        Logger.LogInformation(message);
    }
}