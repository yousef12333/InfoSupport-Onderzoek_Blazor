@page "/passwordchecker"
@using Microsoft.AspNetCore.Components.Forms
@using Blazor_Project.Services
@using Blazor_Project.Classes
@inject PasswordStrengthService passwordCheck
@inject ILogger<FormChecker> logger;
<link rel="stylesheet" href="css/FormChecker.css">

<div class="pass-input-wrapper">
    <h1 class="pass-title">Password strength</h1>
    <label class="pass-label">
        Supports only a combination of
        <br />
        <span @class="-invalid: !IsPasswordValid ? 'pass-invalid' : ''">digits/letters/symbols</span>
    </label>
    <InputText class="pass-input" @bind-Value="inputChecker" @oninput="CheckPassword" placeholder="Enter your password here" />

    <div class="pass-marker">
        @for (int i = 1; i <= 3; i++)
        {
            <span class="@GetSpanClass(i)"></span>
        }
    </div>
</div>

@code {
    private string inputChecker = "";
    private string displayedPasswordStrength = "";
    private bool IsPasswordValid => passwordCheck.IsValidationPassed(inputChecker, PasswordStrength.Easy);
    private bool IsPasswordEasy => passwordCheck.IsValidationPassed(inputChecker, PasswordStrength.Easy);
    private bool IsPasswordMedium => passwordCheck.IsValidationPassed(inputChecker, PasswordStrength.Medium);
    private bool IsPasswordStrong => passwordCheck.IsValidationPassed(inputChecker, PasswordStrength.Strong);


    private PasswordStrength GetPasswordStrength() =>
    inputChecker.Length < 8 ? PasswordStrength.Easy: IsPasswordEasy ? PasswordStrength.Easy : IsPasswordMedium ? PasswordStrength.Medium : IsPasswordStrong ? PasswordStrength.Strong : PasswordStrength.Invalid;

    private string GetSpanClass(int index)
    {
        return string.IsNullOrEmpty(inputChecker) ? "spanColors invalid" :
               inputChecker.Length < 8 ? "spanColors easy" :
               index switch
               {
                   1 => IsPasswordEasy ? "spanColors easy" : (IsPasswordMedium ? "spanColors medium" : (IsPasswordStrong ? "spanColors strong" : "spanColors invalid")),
                   2 => IsPasswordMedium ? "spanColors medium" : (IsPasswordStrong ? "spanColors strong" : "spanColors invalid"),
                   3 => IsPasswordStrong ? "spanColors strong" : "spanColors invalid",
                   _ => "spanColors invalid"
               };
    }


    private void CheckPassword(ChangeEventArgs e)
    {
        try
        {
            inputChecker = e.Value?.ToString();
            UpdateDisplayedPasswordStrength();
        }
        catch (Exception ex)
        {
            displayedPasswordStrength = $"Resource Error: {ex.Message}";
        }
    }

    private void UpdateDisplayedPasswordStrength()
    {
        displayedPasswordStrength = IsPasswordValid ? "Valid" : "Invalid";
    }
}