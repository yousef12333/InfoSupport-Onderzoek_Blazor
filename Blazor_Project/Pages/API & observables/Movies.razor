@page "/movies"
@using Blazor_Project.Classes
@using Blazor_Project.Services
@using System.Reactive.Linq;
@inject NavigationManager NavigationManager
@implements IDisposable
<link rel="stylesheet" href="css/Movies.css">

<div class="MoviesSearch">
    <h1><NavLink href="/">Most Popular Movies</NavLink></h1>
    <input class="MoviesSearch__input" @ref="inputElement" placeholder="Start here..." @oninput="HandleTyping" @bind-value="searchTerm" />
    <ul class="MoviesSearch__list-group">
        @foreach (var movie in searchResults)
        {
            <li class="MoviesSearch__list-group-item">
                <NavLink href="@($"details/{movie.Id}")">
                    @movie.Title<span>(votes: @movie.VoteCount)</span>
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private ElementReference inputElement;
    private IDisposable subscription;
    private string searchTerm = string.Empty;
    private List<Movie> searchResults = new List<Movie>();
    private API api = new API();
    public string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; }
    }
    public IDisposable Subscription => subscription;


    public async Task HandleTyping(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString().Trim();
        if (searchTerm.Length >= 3)
        {
            await SearchMovies();
        }
        else
        {
            ClearSearchResults();
        }
    }

    public async Task SearchMovies()
    {
        subscription?.Dispose();
        subscription = api.Search(searchTerm)
            .Subscribe(async result =>
            {
                var (originalTitles, voteCounts) = result;
                var movieIds = await GetMovieIds(originalTitles);
                searchResults = PopulateSearchResults(originalTitles, voteCounts, movieIds);
                StateHasChanged();
            });
    }

    public async Task<List<int>> GetMovieIds(List<string> titles)
    {
        var movieIds = new List<int>();
        foreach (var title in titles)
        {
            movieIds.Add(await api.GetMovieIdByTitle(title));
        }
        return movieIds;
    }
    public List<Movie> PopulateSearchResults(List<string> originalTitles, List<int> voteCounts, List<int> movieIds) =>
        originalTitles.Zip(voteCounts, (title, count) => new Movie
        {
            Id = movieIds[originalTitles.IndexOf(title)],
            Title = title,
            VoteCount = count
        }).ToList();

    public void ClearSearchResults() =>
        searchResults.Clear();

    public void Dispose() =>
        subscription?.Dispose();
}