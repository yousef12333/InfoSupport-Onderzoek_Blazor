@page "/movies"
@using Blazor_Project.Classes
@using Blazor_Project.Services
@using System.Reactive.Linq;
@inject NavigationManager NavigationManager
@implements IDisposable
<link rel="stylesheet" href="css/Movies.css">

<div class="MoviesSearch">
    <h1><NavLink href="/">Most Popular Movies</NavLink></h1>
    <input class="MoviesSearch__input" ref="@inputElement" placeholder="Start here..." @oninput="HandleTyping" @bind-value="searchTerm" />
    <ul class="MoviesSearch__list-group">
        @foreach (var movie in searchResults)
        {
            <li class="MoviesSearch__list-group-item">
                <NavLink href="@($"details/{movie.Id}")">
                    @movie.Title<span>(votes: @movie.VoteCount)</span>
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private ElementReference inputElement;
    private IDisposable subscription;
    private string searchTerm = string.Empty;
    private List<Movie> searchResults = new List<Movie>();
    private API api = new API();

    private async Task HandleTyping(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString().Trim();
        if (searchTerm.Length >= 3)
        {
            await SearchMovies();
        }
        else
        {
            searchResults.Clear();
        }
    }
    private async Task SearchMovies()
    {
        subscription?.Dispose();
        subscription = api.Search(searchTerm)
            .Subscribe(async result =>
            {
                var (originalTitles, voteCounts) = result;
                searchResults.Clear();

                var movieIds = await Observable.FromAsync(async () =>
                {
                    var ids = new List<int>();
                    foreach (var title in originalTitles)
                    {
                        ids.Add(await api.GetMovieIdByTitle(title));
                    }
                    return ids;
                });

                for (int i = 0; i < originalTitles.Count; i++)
                {
                    searchResults.Add(new Movie
                        {
                            Id = movieIds[i],
                            Title = originalTitles[i],
                            VoteCount = voteCounts[i]
                        });
                }
                StateHasChanged();
            });
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }
}