@page "/math"
@using Blazor_Project.Classes
@using Blazor_Project.Pages.RegularComponent
<link href='https://fonts.googleapis.com/css?family=Fredericka the Great' rel='stylesheet'>
<link rel="stylesheet" href="css/Math.css">

<div class="wrapper">

    @if (!GameStarted)
    {
        <h1>Math-o-Matic</h1>
        <StartButton OnClick="StartGame" />
    }
    else
    {
        <form @onsubmit="HandleSubmit">
            <label>
                <div class="problem-container">@MathProblem.String</div>
                <input type="number" placeholder="?" @bind="CurrentResponse" class="@InputClass" required />
            </label>

            <div class="message-container @(MessageClass)">
                @switch (AnswerStatus)
                {
                    case "Correct!" when RecentStatusChange:
                        <span class="correct">@AnswerStatus</span>
                        break;
                    case "Too Low." when RecentStatusChange:
                        <span class="too-low">@AnswerStatus</span>
                        break;
                    case "Too High." when RecentStatusChange:
                        <span class="too-high">@AnswerStatus</span>
                        break;
                }
                }
            </div>

            <div class="button-container">
                @if (GameStarted)
                {
                    <GetNewProblemButton Disabled="@RecentCorrectAnswer" OnClick="GetNewProblem" />
                    <CheckAnswerButton Disabled="@RecentCorrectAnswer" OnClick="HandleSubmit" />
                }
                else
                {
                    <StartButton OnClick="StartGame" />
                }
            </div>
        </form>
    }
</div>

@code {
    private Timer Timer;
    private MathProblem MathProblem { get; set; }
    private string CurrentResponse { get; set; }
    private bool RecentCorrectAnswer { get; set; }
    private bool RecentStatusChange { get; set; }
    private string AnswerStatus { get; set; }
    private bool GameStarted { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetNewProblem();
    }

    public void GetNewProblem()
    {
        InvokeAsync(() =>
        {
            AnswerStatus = "";
            CurrentResponse = "";
            MathProblem = GetRandomProblem();
            RecentCorrectAnswer = false; 
            StateHasChanged();
        });
    }
    public void FalseAnswer()
    {
        InvokeAsync(() =>
        {
            AnswerStatus = "";
            CurrentResponse = "";
            RecentCorrectAnswer = false;
            StateHasChanged();
        });
    }

    public MathProblem GetRandomProblem()
    {
        var firstNum = GetRandomNumber(10);
        var secondNum = GetRandomNumber(10);
        var operatorChar = GetRandomOperator();
        var mathProblemString = $"{firstNum} {operatorChar} {secondNum} =";
        var correctAnswer = GetCorrectAnswer(firstNum, secondNum, operatorChar);
        return new MathProblem { String = mathProblemString, Answer = correctAnswer };
    }

    public int GetCorrectAnswer(int firstNum, int secondNum, char operatorChar)
    {
        switch (operatorChar)
        {
            case '+': return firstNum + secondNum;
            case '-': return firstNum - secondNum;
            case 'x': return firstNum * secondNum;
            case '÷': return (secondNum != 0) ? (firstNum / secondNum) : int.MaxValue;
            default: throw new ArgumentException("Invalid operator");
        }
    }

    public string GetAnswerStatus(double num)
    {
        var mathProblemAnswer = MathProblem.Answer;
        return num.CompareTo(mathProblemAnswer) switch
        {
            -1 when !double.IsNaN(num) => "Too Low.",
            1 => "Too High.",
            0 => "Correct!",
            _ => "",
        };
    }

    public void HandleSubmit()
    {
        var userAnswer = double.TryParse(CurrentResponse, out var answer) ? answer : double.NaN;

        AnswerStatus = GetAnswerStatus(userAnswer);
        RecentStatusChange = true;

        if (MathProblem.Answer == userAnswer)
        {
            RecentCorrectAnswer = true;
            Timer?.Dispose();
            Timer = new Timer(_ => GetNewProblem(), null, 3000, Timeout.Infinite);
        }
        else
        {
            Timer?.Dispose();
            Timer = new Timer(_ => FalseAnswer(), null, 3000, Timeout.Infinite);
        }
    }
    public void StartGame()
    {
        GameStarted = true;
    }

    public string MessageClass => AnswerStatus.ToLower().Replace(" ", "-").TrimEnd('-');

    public string InputClass => GameStarted ? "" : "hidden ";

    public int GetRandomNumber(int maximum)
    {
        return new Random().Next(maximum + 1);
    }

    public char GetRandomOperator()
    {
        var operators = new char[] { '+', '-', 'x', '÷' };
        return operators[new Random().Next(operators.Length)];
    }
}