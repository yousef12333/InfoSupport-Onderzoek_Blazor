@page "/reactive-forms"
@using Blazor_Project.Classes
@using System.Text.Json
@using System.Diagnostics
@using System.Text.Json
@using System.Diagnostics
@using Microsoft.Extensions.Logging
@using System
@using System.Net.Http
@using Blazor_Project.Services
@inject ILogger<TemplateFormsExample> Logger;
<link rel="stylesheet" href="css/FormExample.css">
<h1>Model-based Form Example:</h1>
<h2>Hello, @FormModel.FirstName, your gender is @GenderLabel</h2>

<EditForm Model="@FormModel" OnSubmit="Submit">
    <p>
        <label id="firstName" style='color: @(string.IsNullOrWhiteSpace(FormModel.FirstName) ? "red" : "inherit")'>First Name:</label>
        <InputText @bind-Value="FormModel.FirstName" />
        @if (string.IsNullOrWhiteSpace(FormModel.FirstName))
        {
            <span class="has-error">This field is required</span>
        }
    </p>
    <p>
        <label>Password:</label>
        <InputText type="password" @bind-Value="FormModel.Password" />
    </p>
    <p>
        Choose gender:
        @RenderGenderOptions()
        <ValidationMessage For="@(() => FormModel.Gender)" />
    </p>
    <p>
        <input type="checkbox" @bind="FormModel.ShouldUseCity" />
    </p>
    @if (FormModel.ShouldUseCity)
    {
        <select @bind="FormModel.City">
            @foreach (var city in Cities)
            {
                <option value="@city.Id">@city.Name</option>
            }
        </select>
    }
    <p>
        <button type="submit">Submit</button>
    </p>
</EditForm>

@code {
    private Stopwatch stopwatch = new Stopwatch();
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Parameter]
    public FormData FormModel { get; set; } = new FormData();
    private string GenderLabel { get; set; }

    private readonly List<Gender> GenderOptions = new List<Gender>
    {
        new Gender { GenderType = "m", Label = "male" },
        new Gender { GenderType = "f", Label = "female" }
    };

    private bool IsSelectedGender(string genderType) => FormModel.Gender == genderType;

    private void SetGender(string genderType)
    {
        FormModel.Gender = genderType;
        GenderLabel = GenderOptions.FirstOrDefault(g => g.GenderType == FormModel.Gender)?.Label;
    }

    private async Task Submit()
    {
        try
        {
            
            stopwatch.Restart();
            var formData = GenerateFormData();
            var json = JsonSerializer.Serialize(formData, new JsonSerializerOptions { WriteIndented = true });
            stopwatch.Stop();
            Log($"The form is submitted - Execution Time: {stopwatch.ElapsedMilliseconds} ms");
            await JSRuntime.InvokeVoidAsync("alert", json);
           
        }
        catch (Exception ex)
        {
            Log(ex.Message);
        }
    }

    private Dictionary<string, string> GenerateFormData()
    {
        return new Dictionary<string, string>
        {
            { "firstName", FormModel.FirstName },
            { "password", FormModel.Password },
            { "shouldUseCity", FormModel.ShouldUseCity.ToString() },
            { "gender", FormModel.Gender },
            { "label", GenderLabel },
            { "city", FormModel.ShouldUseCity ? FormModel.City.ToString() : "" }
        };
    }

    private RenderFragment RenderGenderOptions() => builder =>
    {
        foreach (var genderOption in GenderOptions)
        {
            builder.OpenElement(0, "label");
            builder.OpenElement(1, "input");
            builder.AddAttribute(2, "type", "radio");
            builder.AddAttribute(3, "name", "gender");
            builder.AddAttribute(4, "checked", IsSelectedGender(genderOption.GenderType));
            builder.AddAttribute(5, "onclick", EventCallback.Factory.Create(this, () => SetGender(genderOption.GenderType)));
            builder.CloseElement();
            builder.AddContent(6, genderOption.Label);
            builder.CloseElement();
        }
    };

    private IEnumerable<City> Cities = new List<City>
    {
        new City { Id = 1, Name = "Kharkiv" },
        new City { Id = 2, Name = "Kiev" },
        new City { Id = 3, Name = "Lviv" }
    };
    private async Task MeasureExecutionTime(Func<Task> action, string logMessage)
    {
        stopwatch.Restart();
        await action();
        stopwatch.Stop();

        Log($"{logMessage} - Execution Time: {stopwatch.ElapsedMilliseconds} ms");
    }

    private void Log(string message)
    {
        Logger.LogInformation(message);
    }
}